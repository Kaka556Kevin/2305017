name: CI-CD Pipeline
on:
  push:
    branches:
      - master

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${
    { github.event.repository.name }}

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: Build & Publish Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU (untuk multi-arch, optional)
        uses: docker/setup-qemu-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          TAG_SHA="${{ env.IMAGE_NAME }}:${{ github.sha }}"
          TAG_LATEST="${{ env.IMAGE_NAME }}:latest"
          docker build \
            -t "$TAG_SHA" \
            -t "$TAG_LATEST" \
            .

      - name: Push Docker image
        run: |
          TAG_SHA="${{ env.IMAGE_NAME }}:${{ github.sha }}"
          TAG_LATEST="${{ env.IMAGE_NAME }}:latest"
          docker push "$TAG_SHA"
          docker push "$TAG_LATEST"

  deploy:
    name: Deploy to Production Server
    runs-on: [self-hosted, linux, x64]
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry (lagi)
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull & Restart Container di Server (langsung)
        run: |
          # 1) Pull image yang baru saja kita push
          docker pull "${{ env.IMAGE_NAME }}:${{ github.sha }}"

          # 2) Hentikan container lama (jika ada), lalu hapus
          docker rm -f my-app || true

          # 3) Jalankan container baru di port 80
          docker run -d -p 80:80 --name my-app "${{ env.IMAGE_NAME }}:${{ github.sha }}"
