name: CI-CD Pipeline

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    name: Build & Publish Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          IMAGE_NAME="ghcr.io/kaka556kevin/2305017"
          TAG_COMMIT="${IMAGE_NAME}:${{ github.sha }}"
          TAG_LATEST="${IMAGE_NAME}:latest"
          docker build -t "$TAG_COMMIT" -t "$TAG_LATEST" .

      - name: Push Docker image
        run: |
          IMAGE_NAME="ghcr.io/kaka556kevin/2305017"
          TAG_COMMIT="${IMAGE_NAME}:${{ github.sha }}"
          TAG_LATEST="${IMAGE_NAME}:latest"
          docker push "$TAG_COMMIT"
          docker push "$TAG_LATEST"

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install SSH client (if needed)
        run: |
          sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Start SSH agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts (allow failures)
        run: |
          mkdir -p ~/.ssh
          # If keyscan fails (e.g. network issue), do not break the build
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts || true

      - name: Deploy via SSH
        env:
          IMAGE_NAME: "ghcr.io/kaka556kevin/2305017"
          TAG_COMMIT: "${{ github.ref == 'refs/heads/master' && github.sha }}"
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            # Log into GHCR on the remote host
            echo "$GITHUB_TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull and restart container
            docker pull $IMAGE_NAME:${{ github.sha }}
            docker rm -f my-app || true
            docker run -d -p 80:80 --name my-app $IMAGE_NAME:${{ github.sha }}
          EOF
