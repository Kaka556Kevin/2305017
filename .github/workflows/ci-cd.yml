name: CI-CD Pipeline

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - master

env:
  IMAGE_NAME: ghcr.io/kaka556kevin/2305017

jobs:
  build-and-push:
    name: Build & Publish Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          TAG_COMMIT="${{ env.IMAGE_NAME }}:${{ github.sha }}"
          TAG_LATEST="${{ env.IMAGE_NAME }}:latest"
          docker build -t "$TAG_COMMIT" -t "$TAG_LATEST" .

      - name: Push Docker image
        run: |
          TAG_COMMIT="${{ env.IMAGE_NAME }}:${{ github.sha }}"
          TAG_LATEST="${{ env.IMAGE_NAME }}:latest"
          docker push "$TAG_COMMIT"
          docker push "$TAG_LATEST"

  deploy:
    name: Deploy to Production Server
    runs-on: [self-hosted, linux, x64]  # this means the runner is the production box
    needs: build-and-push

    steps:
      - name: Pull & Restart Container Locally
        run: |
          # First, log into GHCR (so `docker pull` works without needing SSH)
          echo "${{ secrets.GITHUB_TOKEN }}" \
            | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

          # Pull the new image tagged by commit SHA
          docker pull "${{ env.IMAGE_NAME }}:${{ github.sha }}"

          # Stop & remove existing container (if itâ€™s running)
          docker rm -f my-app || true

          # Run the new container on port 80
          docker run -d -p 80:80 --name my-app "${{ env.IMAGE_NAME }}:${{ github.sha }}"
